
// var scene, camera, renderer, clock, controls, scale, stats, gui;
// //var gui_params;
// var stars, constellation_lines, messiers, caldwells, horizon;


var camera, renderer, stats, gui;
var tclock, clock;
var sm;

var latitude = 0;
var longitude = 0;

function init() {

    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
    camera.position.z = -50;
    scene = new THREE.Scene();


    renderer = new THREE.WebGLRenderer({ antialias: true, precision: "lowp", alpha: false, premultipliedAlpha: false, stencil: false });
    renderer.setSize( window.innerWidth , window.innerHeight );

    $('#chart').append( renderer.domElement );

    stats = new Stats();
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.top = '0px';
    $('#chart').append( stats.domElement );


    window.addEventListener( 'resize', onWindowResize, false );

    init_controller();

    // start Scene Manager to manage elements
    sm = new SceneManager(scene, { addZoomCallback: controls.addZoomCallback });
    sm.initElements();
    init_clock();

    init_events();
    init_gui();


}

// starts three.js clock and our own clock
function init_clock() {
    clock = new Clock(new Date());
    tclock = new THREE.Clock();

}

// starts mouse and touch controller
function init_controller() {
    controls = new THREE.TrackballControls(camera, $('#chart')[0]);
    controls.noPan = true;
    controls.zoomSpeed = 2.0;
    controls.rotateSpeed = 0.5;
    controls.dynamicDampingFactor = 0.6;
    controls.target = new THREE.Vector3(0,0,-1);
}

// starts DAT gui with callbacks for when gui variables change
function init_gui() {
    gui = new GUI({ updateLimitMag: sm.updateLimitMag,
                    showConstellations: sm.showConstellations,
                    showMessiers: sm.showMessiers,
                    showCaldwells: sm.showCaldwells,
		    showCoordinateSystem: sm.showCoordinateSystem,
		    showHorizon: sm.showHorizon,
		    updateLocation: updateLocation,
                    updateDateTime: clock.updateDateTime
                  });
    gui.generate_gui();
}

function onWindowResize() {

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize( window.innerWidth, window.innerHeight );

}



function init_events() {
    controls.addMouseCallback(updatePosition);
}

function updatePosition(dir) {
    // console.log("UpdatePosition called");
    // console.log(vector3ToLatLong(dir));
}


var elapsedTime = 0;
function animate() {

    requestAnimationFrame( animate );

    var delta = tclock.getDelta();
    controls.update(delta);

    // update clock and horizon every second
    if(elapsedTime > 0.500) {
        clock.updateDateTime(new Date(clock.getTime() + elapsedTime * 1000));

        updateHorizon();
	gui.updateDateTime(new Date(clock.getTime()));
        elapsedTime = 0;

    }
    elapsedTime += delta;



    render();
    stats.update();

}

function render() {
    renderer.render(scene, camera);
}

function updateLocation(lat, lon) {
    console.log("Lat: ", lat, " Long: ", lon);
    latitude = lat;
    longitude = lon;
}

function updateHorizon() {
    // console.log(clock.date);
    // console.log(clock.date.getLocalSideReal(longitude));
    sm.updateHorizon(latitude, clock.getLongitude(longitude));
}

init();
animate();
