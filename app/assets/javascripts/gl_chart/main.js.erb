
// var scene, camera, renderer, clock, controls, scale, stats, gui;
// //var gui_params;
// var stars, constellation_lines, messiers, caldwells, horizon;
function init() {

    console.log(vector3ToLatLong(new THREE.Vector3(0,0,1)));
    console.log(latLongToVector3(90, 100, 1));
    clock = new THREE.Clock();

    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );
    camera.position.z = -50;
    scene = new THREE.Scene();


    renderer = new THREE.WebGLRenderer({ antialias: true, precision: "lowp", alpha: false, premultipliedAlpha: false, stencil: false });
    renderer.setSize( window.innerWidth , window.innerHeight );



    $('#chart').append( renderer.domElement );

    stats = new Stats();
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.top = '0px';
    $('#chart').append( stats.domElement );
    //

    window.addEventListener( 'resize', onWindowResize, false );

    init_stars();
    init_controller();
    init_elements();
    init_events();
    init_gui();

}

function init_controller() {
    controls = new THREE.TrackballControls(camera, $('#chart')[0]);
    controls.noPan = true;
    controls.zoomSpeed = 2.0;
    controls.rotateSpeed = 0.5;
    controls.dynamicDampingFactor = 0.6;
    controls.target = new THREE.Vector3(0,0,-1);
}


function onWindowResize() {

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize( window.innerWidth, window.innerHeight );

}

function init_elements() {
    init_caldwells();
    init_messiers();
    init_constellations();
    init_stars();
    init_horizon();


}

function init_horizon() {

    horizon = new Horizon();
    var h = horizon.generate_horizon();
    scene.add(h);

    var axisHelper = new THREE.AxisHelper( 5 );
    scene.add(axisHelper);
    
    console.log("added horizon");
    console.dir(horizon);
    horizon.set_zenith(-21, -42);

}


function init_stars() {
    stars = new Stars();
    stars.generate_stars(addStarsCallback);
}

function addStarsCallback(sphere) {
    console.log("Added sphere");
    scene.add(sphere);
    //    renderer.render(scene, camera);

}
function init_messiers() {
    var messiers_obj = new Messiers();
    console.dir(messiers_obj);
    messiers_obj.generate_messiers(addMessiersCallback);
    controls.addZoomCallback(messiers_obj.update_fov);
}

function addMessiersCallback(me) {
    scene.add(me);
    messiers = me;
}

function init_caldwells() {
    var caldwells_obj = new Caldwells();
    console.dir(caldwells_obj);
    caldwells_obj.generate_caldwells(addCaldwellsCallback);
    controls.addZoomCallback(caldwells_obj.update_fov);
}

function addCaldwellsCallback(ca) {
    scene.add(ca);
    caldwells = ca;
}

function init_constellations() {
    constellations = new Constellations();
    constellations.generate_constellations(addConstellationsCallback);
}

function addConstellationsCallback(lines) {
    console.log("Added constellation lines");
    constellation_lines = lines;
    scene.add(lines);


}

function init_events() {
    controls.addMouseCallback(updatePosition);
}

function updatePosition(dir) {
        // console.log("UpdatePosition called");
        // console.log(vector3ToLatLong(dir));
}



function animate() {

    requestAnimationFrame( animate );

    var delta = clock.getDelta();
    controls.update(delta);


    render();
    stats.update();

}

var lon = 0;
function render() {


    //    var time = Date.now() * 0.005;

    //    sphere.rotation.y = 0.02 * time;
    //    sphere.rotation.z = 0.02 * time;

    // for( var i = 0; i < attributes.size.value.length; i ++ ) {

    //     if ( i < vc1 )
    //         attributes.size.value[ i ] = 16 + 12 * Math.sin( 0.1 * i + time );


    // }

    //    attributes.size.needsUpdate = true;

//   if(lon > 360) lon = 0;
  //  horizon.set_zenith(0, lon);
    lon += 0.1;
   
    

    renderer.render(scene, camera);

}


init();
animate();
