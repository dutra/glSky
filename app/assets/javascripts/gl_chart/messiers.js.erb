function Messiers(scene) {
    var _this = this;
    this.generate_messiers = _generate_messiers;

    this.update_fov = _update_fov;
    this.show = _show;
    
    _this.messier_attributes = undefined;
    _this.messier_uniforms = undefined;

    _this.scene = scene;
    
    function _generate_messiers() {

        $.getJSON( "data/messiers.json", function( data ) {
	    console.dir(_this);
            function getTexture() {

                var canvas = document.createElement('canvas');
                canvas.width = 32;
                canvas.height = 32;

                var ctx = canvas.getContext('2d');

                var centerX = canvas.width / 2;
                var centerY = canvas.height / 2;
                var radius = 10;

                ctx.beginPath();
                ctx.translate(0,0);
                ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
		ctx.fillStyle = 'red';
		ctx.fill();
		ctx.lineWidth = 1;
		// ctx.strokeStyle = '#ffffff';
                // ctx.setLineDash([4,6]);
                // ctx.stroke();


                var texture = new THREE.Texture(canvas);
                texture.needsUpdate = true;
                return texture;
            }

            _this.messier_attributes = {
		alpha: {type: 'f', value: [] },
                size: {type: 'f', value: [] },
                ca:   {type: 'c', value: [] },
            };

            _this.messier_uniforms = {
		fov: { type: "f", value: 45.0 },
                color:     { type: "c", value: new THREE.Color( 0xffffff ) },
                texture:   { type: "t", value: getTexture() }
            };

            _this.messier_uniforms.texture.value.wrapS = _this.messier_uniforms.texture.value.wrapT = THREE.RepeatWrapping;

            var shaderMaterial = new THREE.ShaderMaterial( {

                uniforms: _this.messier_uniforms,
                attributes:     _this.messier_attributes,
                vertexShader:   document.getElementById( 'messier.vert' ).textContent,
                fragmentShader: document.getElementById( 'messier.frag' ).textContent,
                transparent: true

            });


            var geom = new THREE.Geometry();
            var values_size = _this.messier_attributes.size.value;
	    var values_alpha = _this.messier_attributes.alpha.value;
            var values_color = _this.messier_attributes.ca.value;


            $.each( data, function( key, messier ) {


                var particle = Util.latLongToVector3(messier["co"][0], messier["co"][1], 100, 2);
                geom.vertices.push(particle);

                var color = new THREE.Color( 0xffffff );
                values_color.push( color );
                values_size.push( messier["s"]*25 );

		values_alpha.push(0.2);

            });

            var system = new THREE.ParticleSystem(geom, shaderMaterial);
	    system.frustrumCulled = true;
	    system.sortParticles = true;
            callback(system);

        });
    }
    function callback(messiers) {
	_this.scene.add(messiers);
	_this.messiers = messiers;
    }
    function _update_fov(fov) {
	if(_this.messier_uniforms != undefined) {
	    _this.messier_uniforms.fov.value = fov;
	}
    }
    function _show(value) {
	if(value)
	    _this.scene.add(_this.messiers);
	else
	    _this.scene.remove(_this.messiers);
    }
}
